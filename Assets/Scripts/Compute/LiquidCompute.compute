// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main
#pragma kernel blurKernal
#pragma kernel main2
#include "Assets/Scripts/CreateLiquid.cs.hlsl"
#include "Assets/Scripts/Compute/ComputeUtils.hlsl"

float ParticlesLength;
StructuredBuffer<ScreenParticle> ScreenParticles;

float4 CellsDimension;
RWStructuredBuffer<ScreenCell> ScreenCells;
RWStructuredBuffer<ScreenCell> ScreenCells2;

float4 ScreenGrabDimensions;
Texture2D<float4> ScreenGrab;
RWTexture2D<float4> OutputColor;
RWTexture2D<float4> OutputSpecial;

float4 LightPosition = float4(5,0,0,20);
float AlphaAtCenter;
float AlphaAtEdge;
float AlphaThreshold;

float4 BaseColor;
float4 BaseTint;
float4 AmbientColor;

float DiffuseVsAmbient;
float DiffuseVsRefraction;
float RefractionMultiplier;
int SpecularPower;
float SpecularRoughness;
bool ShouldDither; //todo perf: remove if statement and replace with define

[numthreads(8,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    int indexFlat = id.x + id.y * CellsDimension.x;
    
    ScreenCell cell;
    cell.Alpha = 0;
    cell.NearestNormal = float3(0,0,-1);
    cell.NearestParticle = float3( 1000000, 100000, 100000);
    cell.FurthestParticle = float3(-1000000,-100000,-100000);

    float2 cellScreenPos = float2((float) id.x / CellsDimension.x, (float) id.y / CellsDimension.y);

    float currentNearestPartDist = 100000;
    float currentFurthestPartDist = -100000;
    for (int k = 0; k < ParticlesLength; k++)
    {
        ScreenParticle part = ScreenParticles[k];
        //todo make this the distance to the sphere at screen... not just the center
        float2 partScreenPos = cameraToViewPosition(part.CameraPosition);
        float distFromCellToPartCenter = distance(cellScreenPos, partScreenPos.xy);
        if (distFromCellToPartCenter < part.Radius)
        {
            float partCameraDist = distance(float3(0,0,0), part.CameraPosition.xyz);
            
            float percentToEdge = distFromCellToPartCenter / part.Radius;
            float partAlpha = lerp(AlphaAtCenter, AlphaAtEdge, percentToEdge);
            cell.Alpha = lerp(cell.Alpha, 1, partAlpha);
            //todo perf: use dot() instead to avoid extra instructions?
            if (partCameraDist < currentNearestPartDist)
            {
                cell.NearestNormal = GetScreenNormal(cellScreenPos, part);
                cell.NearestParticle = part.CameraPosition;
            }
            if (partCameraDist > currentFurthestPartDist)
            {
                cell.FurthestParticle = part.CameraPosition;
            }
        }
    }

    ScreenCells[indexFlat] = cell;
}

[numthreads(8,8,1)]
void blurKernal (uint3 id : SV_DispatchThreadID)
{
    float2 index2D = id.xy;
    int indexFlat = index2D.x + index2D.y * CellsDimension.x;
    
    ScreenCells2[indexFlat] = boxBlurScreenCell(index2D, CellsDimension, ScreenCells);
}

[numthreads(8,8,1)]
void main2 (uint3 id : SV_DispatchThreadID)
{
    float2 index2D = id.xy;
    int indexFlat = index2D.x + index2D.y * CellsDimension.x;
    float2 scaleAmount = 1 /CellsDimension.xy;
    float2 index2DGrab = id.xy * scaleAmount;

    //dithering setup
    // const float kernal[4]= {1.0 /4.0, 2.0/4.0, 3.0/4.0, 1.0/4.0};
    const float kernal[16]= {
        1,8,2,10,
    12,4,14,6,
    3,11,1,9,
    15,7,13,5};
    int kernalSize = 4;
    int2 leftOver = index2D % kernalSize;
    int flatDitherIndex = leftOver.x + leftOver.y * kernalSize;
    float ditherThreshold = kernal[flatDitherIndex]/(kernalSize*kernalSize);

    ScreenCell cell = ScreenCells2[indexFlat];
    float3 lightDir = normalize(LightPosition.xyz);

    //difuse
    float4 diffuse = BaseColor * max(dot(lightDir, cell.NearestNormal), 0.0);
    if (ShouldDither)
    {
        diffuse = step(ditherThreshold, diffuse) * diffuse;
    }
    float4 diffuseAndAmbient = lerp(diffuse, AmbientColor, DiffuseVsAmbient);

    //refract + tint
    float distBetween = (distance(cell.NearestParticle, cell.FurthestParticle)+0.5)/10;
    float dist = max(distBetween, 1);
    float refractionAmount = RefractionMultiplier;
    float2 refractedUV = (index2DGrab + (cell.NearestNormal.xy * dist));
    // float3 refractedPixel = ScreenGrab[refractedUV].xyz;
    // float3 refractedAndTinted = BaseTint.xyz * refractedPixel;

    //refract tint diffuse
    float3 refractTintDiffuse = lerp(diffuseAndAmbient, float3(1,0,1), 0);

    //specular
    float3 reflectedRay = normalize(reflect(lightDir, cell.NearestNormal));
    float amountReflectedNormal = max(dot(float3(0,0,-1), reflectedRay), 0.0);
    
    float specularSmooth = pow(amountReflectedNormal, SpecularPower);
    float specularClamped = round(specularSmooth);
    if (ShouldDither)
    {
        specularClamped = step(ditherThreshold, specularSmooth);
    }
    float specularAmount = lerp(specularClamped, specularSmooth, SpecularRoughness);

    float3 specularColor = max(min(refractTintDiffuse.xyz*4, float3(1,1,1)), float3(0.5,0.5,0.5));

    
    //tint the specular color based off the refraction color... but dont make it too dark, and never above (1,1,1)
    float3 color = lerp(refractTintDiffuse.xyz, specularColor, specularAmount);
    float alpha = cell.Alpha > AlphaThreshold ? cell.Alpha : 0;
    OutputColor[index2D] = float4(color, alpha);

    float cellDistance = distance(cell.NearestParticle, float3(0,0,0));
    OutputSpecial[index2D] = float4(refractedUV, cellDistance, 0);
}
